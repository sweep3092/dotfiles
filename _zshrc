if [ ~/.zshrc -nt ~/.zshrc.zwc ]; then
   zcompile ~/.zshrc
 fi 

# Only for Mac
case ${OSTYPE} in
    darwin*)
        alias ls='ls -G'
        export PATH="/usr/local/sbin:$PATH"        
        # Homebrew
        fpath=($(brew --prefix)/share/zsh/site-functions $fpath)
        fpath=($(brew --prefix)/share/zsh-completions $fpath)
        ;;
    linux*)
        alias ls='ls --color'
        ;;
esac

# Go
export GOPATH=~/.go
export GOBIN=$GOPATH/bin
export PATH=$PATH:$GOPATH/bin
export GO111MODULE=on
bindkey '^r' peco-select-history

# rbenv
export RUBY_CONFIGURE_OPTS="--with-openssl-dir=$(brew --prefix openssl@1.1)"
eval "$(rbenv init -)"

# pyenv
#eval "$(pyenv init -)"

# nvm
#export NVM_DIR="$HOME/.nvm"
#. "$(brew --prefix nvm)/nvm.sh"

# asdf
#. $HOME/.asdf/asdf.sh
#. $(brew --prefix asdf)/asdf.sh

# heroku
#HEROKU_AC_ZSH_SETUP_PATH=/Users/yu.kobayashi/Library/Caches/heroku/autocomplete/zsh_setup && test -f $HEROKU_AC_ZSH_SETUP_PATH && source $HEROKU_AC_ZSH_SETUP_PATH;

# aliases
alias ll='ls -l'
alias be='bundle exec'

# complement
autoload -Uz compinit
compinit -u

setopt AUTO_LIST
setopt NO_LIST_BEEP

# setopt CORRECT
setopt PROMPT_SUBST
setopt AUTOCD
setopt INTERACTIVE_COMMENTS

# history
HISTFILE=~/.zsh_history
HISTSIZE=1000000
SAVEHIST=1000000
setopt HIST_IGNORE_SPACE
setopt EXTENDED_HISTORY
setopt HIST_FIND_NO_DUPS
setopt HIST_IGNORE_DUPS
setopt APPEND_HISTORY

autoload -Uz colors; colors

# prompts
# faster than using "vcs_info"
function rprompt-git-current-branch {
    local name st color

    if [[ "$PWD" =~ '/\.git(/.*)?$' ]]; then
        return
    fi
    #name=$(basename "`git symbolic-ref HEAD 2> /dev/null`")
    name=`git symbolic-ref HEAD 2>/dev/null | sed -E 's!refs/heads/!!'`

    if [[ -z $name ]]; then
        return
    fi

    st=`git status 2> /dev/null`
    if [[ -n `echo "$st" | grep "^nothing to"` ]]; then
        color=${fg[green]}
    elif [[ -n `echo "$st" | grep "^nothing added"` ]]; then
        color=${fg[yellow]}
    elif [[ -n `echo "$st" | grep "^# Untracked"` ]]; then
        color=${fg_bold[red]}
    else
        color=${fg[red]}
    fi

    echo "%{$color%}$name%{$reset_color%} "
}

prompt_exit_status="%(?.%F{green}%?%f.%F{red}%?%f)"
if [ -n "${REMOTEHOST}${SSH_CONNECTION}" ] ; then
  PROMPT='[%F{red}%n@%m%f]%% '
else
  PROMPT='[%F{green}%n@%m%f]%% '
fi
RPROMPT='(${prompt_exit_status})[`rprompt-git-current-branch`%~]'


# peco hitory
function peco-select-history() {
    local tac
    if which tac > /dev/null; then
        tac="tac";
    else
        tac="tail -r";
    fi
    BUFFER=$(history -n 1 | \
        eval $tac | \
        peco --query "$LBUFFER")
    CURSOR=$#BUFFER
    zle clear-screen
}
zle -N peco-select-history

# peco-ghq
function peco-src () {
  local selected_dir=$(ghq list -p | peco --query "$LBUFFER")
  if [ -n "$selected_dir" ]; then
    BUFFER="cd ${selected_dir}"
    zle accept-line
  fi
  zle clear-screen
}
zle -N peco-src
bindkey '^g' peco-src

